networks:
  easy-vpn:
    driver: bridge

services:

  init:
    image: easyvpn/init:latest
    profiles:
      - init
    depends_on:
      - database
      - backend
      - wireguard-vpn-service
      - amneziawg-vpn-service
    build:
      context: init/
      dockerfile: Dockerfile
    environment:
      - API=http://backend:80
      - DB_CONNECTION_STRING=postgresql://${DB_USER}@database:5432
      - DB_PASSWORD=${DB_PASSWORD}
      - CREATE_SECURITY_KEEPER=${INIT_SECURITY_KEEPER:-NO}
      - CREATE_DYNAMIC_PAGES=${INIT_DYNAMIC_PAGES:-NO}
    restart: no
    networks:
      - easy-vpn

# ╔═══ REGION: Base infractructure services ═══╗
  database:
    image: postgres:16
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432"
    restart: always
    volumes:
      - ${DB_VOLUME}:/var/lib/postgresql/data
    networks:
      - easy-vpn

  backend:
    image: easyvpn/backend:latest
    depends_on:
      - database
    ports:
      - "80"
    build:
      context: backend/
      dockerfile: Dockerfile
    environment:
      - HashSettings__Secret=${BACK_HASH_SECRET}
      - JwtSettings__Secret=${BACK_AUTH_SECRET}
      - JwtSettings__ExpiryMinutes=${BACK_AUTH_EXPIRE}
      - ExpireSettings__CheckMinutes=${BACK_TASK_EXPIRE}
      - Features__UseDocumentationEndpoint=${BACK_DOCS_ENABLED:-true}
      - ConnectionStrings__Postgres=User ID=${DB_USER};Password=${DB_PASSWORD};Host=database;Port=5432;
      - ASPNETCORE_URLS=http://+:80
    restart: always
    networks:
      - easy-vpn

  frontend:
    image: easyvpn/frontend:latest
    depends_on:
      - backend
    ports:
      - "3000"
    build:
      context: frontend/
      dockerfile: Dockerfile
    environment:
      - API_URL=/api/
      - AUTH_CHECK_MINUTES=${FRONT_CHECK_AUTH}
    restart: always
    networks:
      - easy-vpn

  reverse-proxy:
    image: nginx:mainline
    depends_on:
      - backend
      - frontend
    ports:
      - "${PORT}:80"
    command: >
      /bin/sh -c "
        echo 'worker_processes 4;

        events {
          worker_connections 1024;
        }

        http {
          
          server {
            listen 80;

            location / {
                proxy_pass http://frontend:3000;
            }

            location /api/ {
                rewrite ^/api/(.*)$ /$1 break;
                proxy_pass http://backend:80;
            }
          }
        }
        ' > /etc/nginx/nginx.conf && nginx -g 'daemon off;'
      "
    restart: always
    networks:
      - easy-vpn
# ╚═══ REGION: Base infractructure services ═══╝



# ╔═══ REGION: VPN services ═══╗
  wireguard-vpn-service:
    image: easyvpn/wireguard-vpn:latest
    build:
      context: services/WireguardVpn
      dockerfile: Dockerfile
    environment:
      - SERVICE_HOST=${VPN_IP}  # your host address
      - SERVICE_USER=${VPN_USER}            # your user name for auth
      - SERVICE_PASSWORD=${VPN_PASSWORD}      # your password for auth
      - VPN_PORT=${WG_VPN_PORT}
      - API_PORT=${WG_API_PORT}
    ports:
      - "${WG_VPN_PORT}:${WG_VPN_PORT}/udp"  # wireguard port
      - "${WG_API_PORT}:${WG_API_PORT}/tcp"    # http-api port
    volumes:
      - ${WG_VOLUME}:/etc/wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    restart: always

  amneziawg-vpn-service:
    image: easyvpn/amneziawg-vpn:latest
    build:
      context: services/AmneziaWgVpn
      dockerfile: Dockerfile
    environment:
      - SERVICE_HOST=${VPN_IP}  # your host address
      - SERVICE_USER=${VPN_USER}            # your user name for auth
      - SERVICE_PASSWORD=${VPN_PASSWORD}      # your password for auth
      - VPN_PORT=${AWG_VPN_PORT}
      - API_PORT=${AWG_API_PORT}
    ports:
      - "${AWG_VPN_PORT}:${AWG_VPN_PORT}/udp"  # amnezia wg port
      - "${AWG_API_PORT}:${AWG_API_PORT}/tcp"    # http-api port
    volumes:
      - ${AWG_VOLUME}:/etc/amnezia
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    devices:
      - "/dev/net/tun:/dev/net/tun"  # device mapping for TUN interface
    restart: always
# ╚═══ REGION: VPN services ═══╝


# ╔═══ REGION: Other services ═══╗
  # bot-service:
  #   image: easyvpn/bot:latest
  #   environment:
  #     - BOT_TOKEN=${BOT_TOKEN}
  #   restart: always
# ╚═══ REGION: Other services ═══╝
networks:
  easy-vpn:
    driver: bridge

services:

  easy-vpn-init:
    image: easyvpn/init:latest
    profiles:
      - init
    depends_on:
      - easy-vpn-database
      - easy-vpn-backend
      - wireguard-vpn-service
      - amneziawg-vpn-service
    container_name: init
    build:
      context: init/
      dockerfile: Dockerfile
    environment:
      - API=http://backend:80
      - DB_CONNECTION_STRING=postgresql://${DB_USER}@database:5432
      - DB_PASSWORD=${DB_PASSWORD}
      - CREATE_SECURITY_KEEPER=${INIT_SECURITY_KEEPER:-NO}
      - CREATE_DYNAMIC_PAGES=${INIT_DYNAMIC_PAGES:-NO}
    restart: no
    networks:
      - easy-vpn

# ‚ïî‚ïê‚ïê‚ïê REGION: Base infractructure services ‚ïê‚ïê‚ïê‚ïó
  easy-vpn-database:
    image: postgres:16
    container_name: database
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432"
    restart: always 
    volumes:
      - ${DB_VOLUME}:/var/lib/postgresql/data
    networks:
      - easy-vpn

  easy-vpn-backend:
    image: easyvpn/backend:latest
    depends_on:
      - easy-vpn-database
    container_name: backend
    ports:
      - "80"
    build:
      context: backend/
      dockerfile: Dockerfile
    environment:
      - HashSettings__Secret=${BACK_HASH_SECRET}
      - JwtSettings__Secret=${BACK_AUTH_SECRET}
      - JwtSettings__ExpiryMinutes=${BACK_AUTH_EXPIRE}
      - ExpireSettings__CheckMinutes=${BACK_TASK_EXPIRE}
      - ConnectionStrings__Postgres=User ID=${DB_USER};Password=${DB_PASSWORD};Host=database;Port=5432;
      - ASPNETCORE_URLS=http://+:80
    restart: always
    networks:
      - easy-vpn

  easy-vpn-frontend:
    image: easyvpn/frontend:latest
    depends_on:
      - easy-vpn-backend
    container_name: frontend
    ports:
      - "3000"
    build:
      context: frontend/
      dockerfile: Dockerfile
    environment:
      - API_URL=/api/
      - AUTH_CHECK_MINUTES=${FRONT_CHECK_AUTH}
    restart: always
    networks:
      - easy-vpn

  easy-vpn-certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ${CERT_VOLUME}:/etc/letsencrypt
      - ${CERT_WEBROOT_VOLUME}:/var/www/certbot
    entrypoint: ["/bin/sh", "-c"]
    command:
      - >
        if [ "$CERT_DOMAIN" = "localhost" ]; then
          echo "üìú Generating self-signed certificate for localhost...";
          mkdir -p /etc/letsencrypt/live/localhost;
          openssl req -x509 -nodes -newkey rsa:2048 \
            -days 365 \
            -subj "/CN=localhost" \
            -keyout /etc/letsencrypt/live/localhost/privkey.pem \
            -out /etc/letsencrypt/live/localhost/fullchain.pem;
          tail -f /dev/null;
        elif [ -f "/etc/letsencrypt/live/$CERT_DOMAIN/fullchain.pem" ]; then
          echo "‚úÖ Certificate already exists ‚Äî skipping generation.";
        else
          echo "üîê Requesting new certificate from Let's Encrypt...";
          certbot certonly --webroot \
            --webroot-path=/var/www/certbot \
            --email $CERT_EMAIL \
            --agree-tos \
            --no-eff-email \
            -d $CERT_DOMAIN;
        fi;

        echo "üîÑ Starting auto-renewal loop...";
        while true; do
          certbot renew --webroot --webroot-path=/var/www/certbot --quiet;
          sleep 12h;
        done
    restart: always

  easy-vpn-proxy:
    image: nginx:mainline
    depends_on:
      - easy-vpn-backend
      - easy-vpn-frontend
      - easy-vpn-certbot
    container_name: proxy
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - ${CERT_VOLUME}:/etc/nginx/ssl
      - ${CERT_WEBROOT_VOLUME}:/var/www/webroot
    command: >
      /bin/sh -c "
        echo 'worker_processes 4;

        events {
          worker_connections 1024;
        }

        http {
          server {
            listen 80;
            server_name ${CERT_DOMAIN};

            location /.well-known/acme-challenge/ {
                root /var/www/webroot;
            }

            location / {
                return 301 https://$$host$$request_uri;
            }
          }

          server {
            listen 443 ssl;
            server_name ${CERT_DOMAIN};
            ssl_certificate /etc/nginx/ssl/live/${CERT_DOMAIN}/fullchain.pem;
            ssl_certificate_key /etc/nginx/ssl/live/${CERT_DOMAIN}/privkey.pem;

            location / {
                proxy_pass http://frontend:3000;
            }

            location /api/ {
                rewrite ^/api/(.*)$ /$1 break;
                proxy_pass http://backend:80;
            }
          }
        }
        ' > /etc/nginx/nginx.conf && \
        (while true; do sleep 24h; nginx -s reload; done) &
        nginx -g 'daemon off;'
      "
    restart: always
    networks:
      - easy-vpn
# ‚ïö‚ïê‚ïê‚ïê REGION: Base infractructure services ‚ïê‚ïê‚ïê‚ïù



# ‚ïî‚ïê‚ïê‚ïê REGION: VPN services ‚ïê‚ïê‚ïê‚ïó
  wireguard-vpn-service:
    image: easyvpn/wireguard-vpn:latest
    container_name: wireguard-vpn-service
    build:
      context: services/WireguardVpn
      dockerfile: Dockerfile
    environment:
      - SERVICE_HOST=${VPN_IP}  # your host address
      - SERVICE_USER=${VPN_USER}            # your user name for auth
      - SERVICE_PASSWORD=${VPN_PASSWORD}      # your password for auth
      - VPN_PORT=${WG_VPN_PORT}
      - API_PORT=${WG_API_PORT}
    ports:
      - "${WG_VPN_PORT}:${WG_VPN_PORT}/udp"  # wireguard port
      - "${WG_API_PORT}:${WG_API_PORT}/tcp"    # http-api port
    volumes:
      - ${WG_VOLUME}:/etc/wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    restart: always

  amneziawg-vpn-service:
    image: easyvpn/amneziawg-vpn:latest
    container_name: amneziawg-vpn-service
    build:
      context: services/AmneziaWgVpn
      dockerfile: Dockerfile
    environment:
      - SERVICE_HOST=${VPN_IP}  # your host address
      - SERVICE_USER=${VPN_USER}            # your user name for auth
      - SERVICE_PASSWORD=${VPN_PASSWORD}      # your password for auth
      - VPN_PORT=${AWG_VPN_PORT}
      - API_PORT=${AWG_API_PORT}
    ports:
      - "${AWG_VPN_PORT}:${AWG_VPN_PORT}/udp"  # amnezia wg port
      - "${AWG_API_PORT}:${AWG_API_PORT}/tcp"    # http-api port
    volumes:
      - ${AWG_VOLUME}:/etc/amnezia
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    devices:
      - "/dev/net/tun:/dev/net/tun"  # device mapping for TUN interface
    restart: always
# ‚ïö‚ïê‚ïê‚ïê REGION: VPN services ‚ïê‚ïê‚ïê‚ïù



# ‚ïî‚ïê‚ïê‚ïê REGION: Other services ‚ïê‚ïê‚ïê‚ïó
  # bot-service:
  #   image: easyvpn/bot:latest
  #   container_name: bot-service
  #   environment:
  #     - BOT_TOKEN=${BOT_TOKEN}
  #   restart: always
# ‚ïö‚ïê‚ïê‚ïê REGION: Other services ‚ïê‚ïê‚ïê‚ïù
